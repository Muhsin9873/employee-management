{"version":3,"sources":["./src/app/modules/auth/login/login-routing.module.ts","./src/app/modules/auth/login/login.component.ts","./src/app/modules/auth/login/login.component.html","./src/app/modules/auth/login/login.module.ts"],"names":[],"mappings":"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","file":"src_app_modules_auth_login_login_module_ts.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { extract } from 'src/app/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthComponent } from '../auth.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { SignUpComponent } from '../sign-up/sign-up.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component: AuthComponent,\r\n  children:[\r\n    {\r\n      path:'login',\r\n      component: LoginComponent,\r\n      data: { title: extract('Login') },\r\n    },\r\n    {\r\n      path:'register',\r\n      component: SignUpComponent,\r\n      data: { title: extract('Register') },\r\n    }\r\n  ]\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { Logger } from 'src/app/core/logger.service';\r\nimport { AuthenticationService } from 'src/app/core/services/authentication/authentication.service';\r\nconst log = new Logger('Login');\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { ToasterMessageService } from 'src/app/core/services/toaster-message/toaster-message.service';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  phone: any;\r\n  error: string | undefined;\r\n  constructor(\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private authenticationService: AuthenticationService,\r\n    private spinner: NgxSpinnerService,\r\n    public messageService: ToasterMessageService,\r\n    \r\n    \r\n  ) {\r\n    this.createForm();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  private createForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['',[Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n  login() {\r\n    this.spinner.show();\r\n    this.error = '';\r\n    const params = {\r\n      password: this.loginForm.value.password,\r\n      email: this.loginForm.value.email,\r\n    };\r\n    const login$ = this.authenticationService.login(params);\r\n    login$\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loginForm.markAsPristine();\r\n        })\r\n      )\r\n      .subscribe(\r\n        (credentials: any) => {\r\n          if(credentials && credentials.data){\r\n            this.router.navigate(['home'])\r\n            this.spinner.hide()\r\n\r\n          }\r\n          else{\r\n            this.spinner.hide()\r\n            this.messageService.showErrorToaster(\"Invalid Email Address or Password\")\r\n          }\r\n        },\r\n        (error) => {\r\n          log.debug(`Login error: ${error}`);\r\n          this.spinner.hide()\r\n\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n","<div class=\"login-header\">\r\n  <div >\r\n    <h5><b>Employee Manager</b></h5>\r\n  </div>\r\n  <div class=\"login-wrapper\">\r\n    <h6 style=\"margin-right: 10px;\" class=\"loginText\" routerLink=\"/login\">Login</h6>\r\n    <h6 class=\"registerText\" routerLink=\"/register\">Register</h6>\r\n  </div>\r\n</div>\r\n<hr>\r\n\r\n<div class=\"login-signup-box\">\r\n  <div class=\"login-container\">\r\n    <div class=\"header-wrap\">\r\n      <div class=\"main-header\">Login</div>\r\n    </div>\r\n    <div>\r\n      <div>\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\r\n          <div\r\n            class=\"qw-form-group mb-4\"\r\n            [class.qw-input-validation]=\"\r\n              loginForm.controls.email.invalid &&\r\n              !loginForm.controls.email.untouched\r\n            \"\r\n          >\r\n            <label class=\"qw-form-label\">Email Address</label >\r\n            <input\r\n              class=\"form-control qw-form-control-prepend\"\r\n              formControlName=\"email\"\r\n              required\r\n            />\r\n            <small\r\n              *ngIf=\"\r\n                loginForm.controls.email.touched &&\r\n                loginForm.controls.email.errors?.required\r\n              \"\r\n              class=\"validation-text\"\r\n              translate\r\n            >\r\n              Enter a valid Email Address.\r\n            </small>\r\n          </div>\r\n\r\n          <div\r\n            class=\"qw-form-group\"\r\n            [class.qw-input-validation]=\"\r\n              loginForm.controls.password.invalid &&\r\n              !loginForm.controls.password.untouched\r\n            \"\r\n          >\r\n            <label for=\"customerName\" class=\"qw-form-label\">Password</label>\r\n            <input\r\n              name=\"password\"\r\n              class=\"form-control qw-form-control-prepend-last\"\r\n              type=\"password\"\r\n              formControlName=\"password\"\r\n              required\r\n            />\r\n            <small\r\n              *ngIf=\"\r\n                loginForm.controls.password.invalid &&\r\n                !loginForm.controls.password.untouched\r\n              \"\r\n              class=\"validation-text\"\r\n              translate\r\n            >\r\n              Enter a valid password\r\n            </small>\r\n          </div>\r\n          <div class=\"forgot-password text-right mr-5\">\r\n            <a>\r\n              Forgot Password ?\r\n            </a>\r\n          </div>\r\n          <div class=\"lg-button-wrapper mt-4\">\r\n            <button class=\"btn qw-button-wd qw-btn-primary\" type=\"submit\" [disabled]=\"loginForm.invalid \">\r\n              <span translate>Login</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ngx-spinner\r\n  bdColor=\"rgba(0, 0, 0, 0.3)\"\r\n  size=\"default\"\r\n  color=\"#ee4a26\"\r\n  type=\"square-jelly-box\"\r\n  [fullScreen]=\"true\"\r\n>\r\n  <p style=\"color: white\">Loading...</p>\r\n</ngx-spinner>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ShellModule } from 'src/app/shell/shell.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { AuthComponent } from '../auth.component';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    LoginRoutingModule,\r\n    SharedModule,\r\n    ShellModule,\r\n    FormsModule,\r\n    NgxSpinnerModule\r\n  ],\r\n  declarations: [LoginComponent, AuthComponent],\r\n})\r\nexport class LoginModule { }\r\n"],"sourceRoot":"webpack:///"}